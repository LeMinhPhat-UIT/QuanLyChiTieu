Tình trạng:
    1. Các hàm đã được test và chạy đúng mong đợi. Tuy nhiên các hàm này chỉ có thể tương tác trực tiếp với các cấu trúc (class) định nghĩa sẵn-do đó nếu muốn tương tác với DataBase thì phải truyền dữ liệu từ DataBase vào các cấu trúc (class) phù hợp.

    2. Tuy các hàm có chức năng 'Thêm', 'Xóa', 'Sửa' đã chạy đúng nhưng chưa nối vào các button tương ứng trên giao diện.

    3. Các List, Dictionary chứa các dữ liệu đều có thể load lên giao diện thông qua ItemsSource. Nhưng đứa viết hàm ngu về Binding quá nên không trực tiếp kết nối được.

    4. DÒNG TIỀN và LOẠI VÍ TIỀN do ít nên đã được thêm sẵn trong các class tương ứng. Còn DANH MỤC (Catalog) do có thể nhiều nên cần load từ DataBase

Tóm tắt:

BusinessLogic:
    Helpers:
        DateHelper.cs
        StatisticHelper.cs
    Services:
        BudgetService.cs
        FinanceService.cs
    SupportedClasses:
        Catalog.cs
        StatisticReport.cs
        Transaction.cs
        Wallet.cs

Chi tiết:
    DateHelper.cs:
        [attributes]:
        - static int[] _dayOfMonth = new int[] { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 }

        [methods]:
        + static bool isValid(string date) // Kiểm tra tính hợp lệ của ngày
        + static bool isLeapYear(int year) // Kiểm tra năm nhuận
        - static void UpdateDaysInMonth(int year) // Nếu là năm nhuận sẽ cập nhật ngày của tháng 2 trong _dayOfMonth
        + static bool isBetween(DateTime date, DateTime start, DateTime end) // Kiểm tra ngày có nằm giữa không
        + static DateTime GetCurrentDate() // Lấy ngày hiện hành
        + static TimeSpan GetDayBetween(DateTime start, DateTime end) // Tính lượng ngày giữa 2 ngày
        + static int GetNumberOfDaysInMonth(int year, int month)  // Lấy số ngày của tháng

    StatisticHelper.cs:
        [attributes]:

        [methods]:
        + static double GetIncome(DateTime startDate, DateTime endDate) // Tính tổng thu nhập
        + static double GetExpense(DateTime startDate, DateTime endDate) // Tính tổng chi tiêu
        + static double GetBalance(DateTime startDate, DateTime endDate) // Tính chênh lệch giữa thu nhập và chi tiêu
        + static Tuple<SeriesCollection, StatisticReport>  GetChartData(string moneyFlow, DateTime startDate, DateTime endDate) // Trả ra dữ liệu của biểu đồ và bảng thông số

    BudgetService.cs:
        [attributes]:
        + static Dictionary<int, Wallet> _allWallets // Chứa tất cả các ví tiền
        
        [methods]:
        + static Wallet CreateWallet(string walletName, string type, string money, DateTime updateDate) // Tạo ví tiền mới
        + static void DeleteWallet(int walletID) // Xóa ví tiền
        + static void UpdateWallet(int walletID, string? newWalletName, string? newWalletType, string? newMoney, DateTime? updateDate = null) // Cập nhật ví tiền

    FinanceService.cs:
        [attributes]:
        + static Dictionary<int, Transaction> _allTransaction // Chứa tất cả giao dịch

        [methods]:
        + static void Alert() // Thông báo không đủ tiền
        + static void AddTransaction(int transactionID, int walletID) // Thêm giao dịch vào 1 ví tiền
        + static void DeleteTransaction(int transactionID) // Xóa giao dịch
        + static void UpdateTransaction(int transactionID, string? newTransactionName, string? newMoney, string? newMoneyFlow, string? newCatalog, int newWalletID = -1, DateTime? date = null) // Cập nhật giao dịch
        + static List<Transaction> GetAllDataByFlow(MoneyFlow transactionMoneyFlow, DateTime startDate, DateTime endDate) // Lấy dữ liệu theo dòng tiền

    Catalog.cs:
        [attributes]:
        + static Dictionary<string, Catalog> _allCatalogs // Chứa tất cả danh mục
        + string Name // Tên danh mục
        + MoneyFlow MoneyFlow // Loại dòng tiền của danh mục

        [methods]:
        - Catalog(string name, string moneyFlow) // Khởi tạo danh mục (phải thông qua hàm)
        + static Catalog CreateCatalog(string name, string moneyFlow) // Tạo danh mục
        + static void DeleteCatalog(string name) // Xóa danh mục

    MoneyFlow.cs:
        [attributes]:
        + static MoneyFlow Income // Thu Nhập
        + static MoneyFlow Expense // Chi Tiêu
        + static Dictionary<string, MoneyFlow> _allMoneyFlows // Chứa mọi dòng tiền
        + string Name // Tên loại dòng tiền

        [methods]:
        - MoneyFlow(string name) // Khởi tạo dòng tiền (không được phép tạo thêm)

    StatisticReport.cs:
        [attributes]:
        + double Total // Tổng
        + double Mean // Trung bình
        + double Median // Trung Vị
        + double Min // Min
        + double Max // Max

        [methods]:
        + StatisticReport(double total=0, double mean=0, double median=0, double min=0, double max=0) // Khởi tạo báo cóa

    Transaction.cs:
        [attributes]:
        - static int cnt // Đếm id
        + int ID
        + string TransactionName
        + double Money
        + MoneyFlow TransactionMoneyFlow
        + Catalog Catalog
        + Wallet Wallet
        + DateTime TransactionDate

        [methods]:
        + Transaction(string transactionName, string money, string transactionTypeName, string catalogName, DateTime date) // Khởi tạo giao dịch
        + static Transaction CreateTransaction(string transactionName, string money, string transactionTypeName, string catalogName, DateTime date) // Tạo giao dịch
        + Transaction SetAsIncome() // Cập nhật dòng tiền vào cho giao dịch
        + Transaction SetAsExpense() // Cập nhật dòng tiền ra cho giao dịch

    WalletType.cs:
        [attributes]:
        + static WalletType Cash // Tiền Mặt
        + static WalletType DebitCard // Thẻ Ghi Nợ
        + static WalletType CreditCard // Thẻ Tín Dụng
        + static WalletType VirtualAccount // Tài Khoản Ảo
        + static WalletType Investment // Đầu Tư
        + static WalletType Debt // Nợ Tôi
        + static WalletType MyDebt // Tôi Nợ
        + static Dictionary<string, WalletType> _allWalletTypes // Chứa tất cả loại ví tiền
        + string Name { get; set; }

        [methods]:
        - WalletType(string name) // Khởi tạo ví tiền (không cho phép tạo thêm)

    Wallet.cs:
        [attributes]:
        - static int _cnt // Đếm Id
        - static Dictionary<int, Transaction> _allTransactions // Chứa tất cả các giao dịch thông qua ví tiền này
        + int ID
        + string WalletName
        + WalletType WalletType
        + double Money
        + DateTime UpdateDate

        [methods]:
        + Wallet(string walletName, string type, string money, DateTime updateDate) // Khởi tạo ví tiền
        + void AddTransaction(int transactionID) // Thêm giao dịch
        + void DeleteTransaction(int transactionID) // Xóa giao dịch
