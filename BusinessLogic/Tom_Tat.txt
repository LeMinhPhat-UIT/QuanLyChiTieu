BudgetService:
    + static Dictionary<Catalog, (double, double)> _budgetOfEachCatalog  -->  'Lưu ngân sách theo từng Catalog'
    + static double totalBudget  -->  'Tổng ngân sách'

    + void SetBudget(Catalog, double)  -->  'Định ngân sách cho một Catalog'
    + void UpdateBudget(Catalog, double)  -->  'Chỉnh sửa ngân sách cho một Catalog'
    + void DeleteBudget(Catalog)  -->  'Xóa ngân sách của một Catalog'
    + (double, double) GetRemainingBudget(Catalog? catalog = null)  -->  'Lấy ngân sách và tỉ lệ phần trăm còn lại của một Catalog. Nếu null thì sẽ mặc định tính sách của toàn bộ dữ liệu'

FinanceService:
    + static List<Transaction> _allTransaction -->  'Lưu tất cả giao dịch'
    + static List<Account> _allAccounts  -->  'Lưu tất cả các tài khoản'

    + static Account CreateAccount(string name, AccountType accountType, double moneyAmount)  -->  'Tạo một Account mới với Tên-Kiểu-Lượng Tiền'
    + static void DeleteAccount(int id)  -->  'Xóa một Account theo ID'
    + static void UpdateAccount(int id, string name="", AccountType? accountType=null, double moneyAmount=-1)  -->  'Chỉnh sửa thông tin của một Account'
    + static void Alert()  -->  'Thông báo số dư của Account không đủ để thực hiện giao dịch'
    + static void Transfer(Transaction transaction, Account fromAccount, Account toAccount)  -->  'Chuyển khoản giữa 2 Account'
    + static void EarnMoney(Transaction transaction, Account account)  -->  'Tạo thu nhập cho một Account'
    + static void SpendMoney(Transaction transaction, Account account)  -->  'Tạo chi tiêu cho một Account'
    + static void DeleteTransaction(int idTransaction, int idAccount)  -->  'Xóa một giao dịch dựa trên ID giao dịch và ID tài khoản chứa giao dịch'
    + static void UpdateTransaction(int id, Account? account=null, Catalog? catalog=null, FinanceFlow? flow=null, double moneyAmount=-1, string note="")  -->  'Cập nhật thông tin của một giao dịch'
    + static List<Transaction> GetTransactionHistory(Account account)  -->  'Lấy toàn bộ lịch sử giao dịch của 1 Account'
    + static List<Transaction> GetAllDataByFlow(FinanceFlow flow, DateTime startDate, DateTime endDate)  -->  'Lấy dữ liệu dựa trên dòng tiền và giữa 2 khoảng thời gian. (Hỗ trợ cho việc tính toán thống kê từ ngày x tới ngày y)'

DateHelper:
    - static int[] _dayOfMonth = new int[] { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 }  -->  'Số ngày của từng tháng'

    + static bool CheckValid(string date)  -->  'Kiểm tra ngày hợp lệ'
    + static bool isLeapYear(int year)  -->  'Kiểm tra năm nhuận'
    + static void UpdateDaysInMonth(int year)  -->  'Cập nhật ngày của năm nhuận'
    + static bool isBetween(DateTime date, DateTime start, DateTime end)  -->  'Kiểm tra xem date có nằm giữa startDate và endDate không'
    + static DateTime GetCurrentDate()  -->  'Lấy ngày hiện hành'
    + static TimeSpan GetDayBetween(DateTime start, DateTime end)  -->  'Lấy thời gian giữa startDate và endDate'
    + static int GetNumberOfDaysInMonth(int year, int month)  -->  'Lấy số ngày trong tháng của năm'

StatisticHelper:
    ---

    + static double GetIncome(DateTime startDate, DateTime endDate)  -->  'Tính tổng thu nhập theo ngày'
    + static double GetExpense(DateTime startDate, DateTime endDate)  -->  'Tính tổng chi tiêu theo ngày'
    + static double GetBalance(DateTime startDate, DateTime endDate)  -->  'Tính giá trị chênh lệch giữa thu nhập và chi tiêu'
    + static Chart GetDataForChart(FinanceFlow flow, DateTime startDate, DateTime endDate)  -->  'Lấy dữ liệu cho biểu đồ'
    + static void GenerateReport(Chart chart, string filePath)  -->  'Chuyển dữ liệu biểu đồ ra file. Thông tin lưu có cấu trúc như sau:
                                                                      Id:
                                                                      Tổng, Trung Bình, Trung Vị, Min, Max
                                                                      Catalog, Lượng tiền, Tỉ lệ phần trăm
                                                                     '


Các class hỗ trợ:

AccountType:  -->  'Định nghĩa các kiểu Account'
    + static AccountType Cash = new AccountType("Tiền Mặt");
    + static AccountType DebitCard = new AccountType("Thẻ Ghi Nợ");
    + static AccountType CreditCard = new AccountType("Thẻ Tín Dụng");
    + static AccountType VirtualAccount = new AccountType("Tài Khoản Ảo");
    + static AccountType Investment = new AccountType("Đầu Tư");
    + static AccountType Debt = new AccountType("Nợ Tôi");
    + static AccountType MyDebt = new AccountType("Tôi Nợ");
    + string Name { get; set; }

    - AccountType(string name)  -->  'Không cho phép tạo thêm loại Account'

Account:
    - int id  -->  'Thể hiện đã có bao nhiêu Account được tạo ra. (Chỉ đúng nếu không có Account nào bị xóa)'
    - List<Transaction> _allTransactions  -->  'Chứa các giao dịch của Account'
    + int Id  -->  'Id của Account'
    + string Name  -->  'Tên của Account'
    + AccountType AccountType  -->  'Loại Account'
    + double moneyAmount  -->  'Lượng Tiền'

    + void AddTransaction(Transaction transaction)  -->  'Thêm một giao dịch'
    + void DeleteTransaction(Transaction transaction)  -->  'Xóa một giao dịch'
    + List<Transaction> GetAllTransactions()  -->  'Lấy tất cả giao dịch của Account'

Catalog:
    - static readonly Dictionary<string, Catalog> allCatalogs  -->  'Toàn bộ danh mục đã được tạo. (Có thể tạo thêm, mặc định chưa có)'
    + string Name  -->  'Tên danh mục'

    - Catalog(string name)  -->  'Không cho phép tự ý tạo mà không thông qua hàm'
    + static Catalog CreateCatalog(string name)  -->  'Tạo một danh mục mới'
    + static void DeleteCatalog(string name)  -->  'Xóa danh mục (nếu có)'

Chart:
    - static int cnt
    + double[] SummaryStatistic; //total, mean, median, min, max  -->  'Các thông số để vẽ biểu đồ, chú thích'
    + int Id  -->  'Id biểu đồ'
    + Dictionary<Catalog, (double Cost, double Percent)> Data  -->  'Với từng danh mục thì lượng tiền đã dùng, chiếm bao nhiêu phần trăm trên tổng đang xét. (Xét riêng thu và chi)'

    + Chart()
    + void AddData(Catalog catalog, double cost, double percent)  -->  'Thêm dữ liệu vào Data'

FinanceFlow:
    + static FinanceFlow Income = new FinanceFlow("Thu Nhập");
    + static FinanceFlow Expense = new FinanceFlow("Chi Tiêu");

    + string Name  -->  'Tên của dòng tiền'
    - FinanceFlow(string name)  -->  'Không cho tạo mới dòng tiền. (Chỉ có dòng ra và dòng vào)'

Transaction:
    - static int _cnt = 0;
    + int Id 
    + Catalog Catalog 
    + FinanceFlow Flow 
    + DateTime Date
    + double MoneyAmount
    + string Note

    + Transaction(DateTime date, double moneyAmount, string note)  -->  'Tạo giao dịch mới'
    + Transaction SetAsIncome()  -->  'Set loại giao dịch là thu nhập'
    + Transaction SetAsExpense()  -->  'Set loại giao dịch là chi tiêu'
